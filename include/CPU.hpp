//
// Created by Mikhail Tsaritsyn on Apr 01, 2025.
//

#ifndef EMULATOR_MOS_6502_CPU_HPP
#define EMULATOR_MOS_6502_CPU_HPP
#include "Clock.hpp"
#include <atomic>

namespace emulator::mos_6502 {
class CPU {
public:
    explicit CPU(std::chrono::nanoseconds clock_period) noexcept;

    /**
     * @brief Start the CPU
     *
     * It enters an endless loop executing instructions one by one.
     */
    void start() noexcept;

    /**
     * @brief Terminate the execution of the CPU
     *
     * It is designed to be called from a thread other than that running the CPU.
     */
    void terminate() noexcept;

    /**
     * @brief Estimated clock frequency
     */
    [[nodiscard]] double frequency() const noexcept;

private:
    /**
     * @brief Block execution until the next high pulse arrives from @link _clock @endlink
     */
    void wait_for_clock() noexcept;

    /**
     * @brief Pulse generator of the CPU.
     *
     * Execution of the next instruction can only start when the pulse is high.
     */
    Clock _clock;

    /// @brief If @p true, the CPU must stop after completing the current operation
    std::atomic_flag _terminate = false;

    /**
     * @brief Estimated clock frequency
     */
    double _frequency = 0.;

    /**
     * @brief The number of clock pulses generated by the moment
     */
    size_t _cycle = 0;
};

} // namespace emulator::mos_6502

#endif //EMULATOR_MOS_6502_CPU_HPP
