name: CMake Build Matrix

on: [push]

jobs:
  build:
    name: "Build and test ${{ matrix.cc }} ${{ matrix.build_type }} for ubuntu-latest"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cc: [ gcc, clang ]
        build_type: [ debug, release ]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Show Github info
        run: echo "${{ github.ref }} ${{ github.ref_name }} ${{ github.base_ref }}"

      - name: Install latest CMake
        run: sudo snap install cmake --classic

      - name: Install Googletest
        run: |
          sudo apt-get -y install googletest
          cd /usr/src/googletest/
          sudo mkdir build
          cd build
          sudo cmake --install-prefix=/usr/local -DBUILD_SHARED_LIBS=ON -DBUILD_GMOCK=ON -DINSTALL_GTEST=ON -DINSTALL_GMOCK=ON ../
          sudo make
          sudo make install
          cd ..
          sudo rm -r build

      - name: Set environment variables
        run: |
          export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
          echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Configure
        run: /snap/bin/cmake --preset=${{ matrix.cc }}-${{ matrix.build_type }}-warnings

      - name: Build
        run: /snap/bin/cmake --build --preset=${{ matrix.cc }}-${{ matrix.build_type }}-warnings

      - name: Test
        run: /snap/bin/ctest --preset=${{ matrix.cc }}-${{ matrix.build_type }}-warnings

      - name: Pack
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: /snap/bin/cpack --preset=${{ matrix.cc }}-${{ matrix.build_type }}-warnings

      - name: Upload
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/upload-artifact@v4
        with:
          path: ./build/${{ matrix.cc }}-${{ matrix.build_type }}-warnings/emulator-0.1.1-Linux.tar.gz
          name: "ubuntu-latest-${{ matrix.cc }}-${{ matrix.build_type }}.tar.gz"

  release:
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Store Release url
        run: echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

      - uses: actions/upload-artifact@v4
        with:
          path: ./upload_url
          name: upload_url

  publish:
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    name: "Publish precompiled ${{ matrix.cc }} ${{ matrix.build_type }}"
    runs-on: ubuntu-latest
    needs: release
    strategy:
      fail-fast: false
      matrix:
        cc: [ gcc ]
        build_type: [ debug, release ]

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: "ubuntu-latest-${{ matrix.cc }}-${{ matrix.build_type }}.tar.gz"
          path: ./

      - name: Download URL
        uses: actions/download-artifact@v1
        with:
          name: upload_url
          path: ./
      - id: set_upload_url
        run: |
          upload_url=`cat ./upload_url`
          echo ::set-output name=upload_url::$upload_url

      - name: Upload to Release
        id: upload_to_release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
          asset_path: "./ubuntu-latest-${{ matrix.cc }}-${{ matrix.build_type }}.tar.gz"
          asset_name: "ubuntu-latest-${{ matrix.build_type }}.tar.gz"
          asset_content_type: application/x-gtar
